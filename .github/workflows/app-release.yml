name: 应用发布

on:
  push:
    tags:
      - 'v*' # 只匹配以v开头的标签格式，例如 v1.0.0, v1.2.3
  workflow_dispatch:
    inputs:
      tag:
        description: '标签版本 (例如: v1.0.0)'
        required: true
        type: string

env:
  # 跳过Sharp库的libvips全局安装
  SHARP_IGNORE_GLOBAL_LIBVIPS: "true"
  # 禁用Sharp的下载进度显示
  SHARP_INSTALL_VERBOSE: "false"
  # 使用预编译的二进制文件
  SHARP_INSTALL_PREBUILT: "true"

jobs:
  # 生成变更日志
  generate-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 获取最新标签
        id: get_previous_tag
        run: |
          # 获取倒数第二个标签（即上一个发布版本）
          PREVIOUS_TAG=$(git tag --sort=-creatordate | head -n 2 | tail -n 1)
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果没有找到上一个标签，使用第一个提交
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "CURRENT_TAG=${{ github.event.inputs.tag || github.ref_name }}" >> $GITHUB_ENV
      
      - name: 生成变更日志
        id: changelog
        run: |
          # 生成上次发布以来的所有提交日志
          CHANGELOG=$(git log --pretty=format:"- %s (%h) by %an" ${{ env.PREVIOUS_TAG }}..${{ env.CURRENT_TAG }} | sort)
          
          # 如果没有提交记录，使用默认消息
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- 首次发布或没有新提交"
          fi
          
          # 输出日志（多行变量）
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # 更新版本号
  update-versions:
    runs-on: ubuntu-latest
    needs: generate-changelog
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}
      
      - name: 设置版本变量
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.tag }}" != "" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          # 移除版本号前的'v'
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_ENV
      
      - name: 更新Tauri配置版本号
        run: |
          # 更新tauri.conf.json版本号
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.set_version.outputs.version }}"/' app/src-tauri/tauri.conf.json
          cat app/src-tauri/tauri.conf.json
      
      - name: 提交更改
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: 更新Tauri版本号至 ${{ steps.set_version.outputs.version }}"
          file_pattern: "app/src-tauri/tauri.conf.json"
          branch: ${{ github.event.repository.default_branch }}

  # 桌面平台构建任务
  publish-desktop:
    needs: [generate-changelog, update-versions]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # 苹果M系列芯片(ARM)
            args: '--target aarch64-apple-darwin'
            asset_name: 'macos-aarch64'
          - platform: 'macos-latest' # Intel芯片Mac
            args: '--target x86_64-apple-darwin'
            asset_name: 'macos-x64'
          - platform: 'windows-latest' # Windows平台
            args: ''
            asset_name: 'windows'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: 设置Node环境
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'bun'

      - name: 安装Rust稳定版
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: 安装pnpm
        run: npm install -g pnpm

      - name: 安装bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 安装前端依赖
        run: |
          echo "正在安装依赖，已禁用Sharp的耗时操作"
          bun install --no-save
          cd app && bun install --no-save

      - uses: tauri-apps/tauri-action@dev
        id: tauri-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: ${{ needs.update-versions.outputs.version }}
          releaseName: 'Blinko v${{ needs.update-versions.outputs.version }}'
          releaseBody: ${{ needs.generate-changelog.outputs.changelog }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: true
          
      - name: 重命名构建资产
        if: steps.tauri-build.outputs.packagePath != ''
        run: |
          mkdir -p artifacts
          cp ${{ steps.tauri-build.outputs.packagePath }} artifacts/blinko-${{ matrix.asset_name }}-${{ needs.update-versions.outputs.version }}${{ endsWith(steps.tauri-build.outputs.packagePath, '.msi') && '.msi' || endsWith(steps.tauri-build.outputs.packagePath, '.dmg') && '.dmg' || '' }}
        shell: bash
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: blinko-${{ matrix.asset_name }}
          path: artifacts/*
          retention-days: 3

  # 安卓平台构建任务
  publish-android:
    needs: [generate-changelog, update-versions]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: 设置JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 设置Node环境
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'bun'

      - name: 安装bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 安装依赖
        run: |
          echo "正在安装依赖，已禁用Sharp的耗时操作"
          bun install --no-save
          cd app && bun install --no-save

      - name: 配置Gradle缓存
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 上传Keystore文件
        run: |
          # 创建keystore目录
          mkdir -p ~/.android
          # 创建keystore文件
          echo "${{ secrets.UPLOAD_KEYSTORE }}" | base64 --decode > ~/.android/upload-keystore.jks
          # 创建keystore.properties
          cat > app/src-tauri/gen/android/keystore.properties << EOF
          password=106111
          keyAlias=upload
          storeFile=$HOME/.android/upload-keystore.jks
          EOF

      - name: 构建Android应用
        run: |
          cd app
          bun run tauri android build --release
      
      - name: 重命名APK
        run: |
          mkdir -p artifacts
          cp app/src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk artifacts/blinko-android-${{ needs.update-versions.outputs.version }}.apk
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: blinko-android
          path: artifacts/*
          retention-days: 3

  # 发布合并产物
  publish-release:
    needs: [generate-changelog, update-versions, publish-desktop, publish-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: 显示目录结构
        run: find release-artifacts -type f | sort
          
      - name: 创建GitHub发布
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/**/*
          tag_name: v${{ needs.update-versions.outputs.version }}
          name: Blinko v${{ needs.update-versions.outputs.version }}
          body: |
            ## 版本 ${{ needs.update-versions.outputs.version }} 变更日志
            
            ${{ needs.generate-changelog.outputs.changelog }}
            
            ## 下载
            
            ### 桌面版本
            - Windows: blinko-windows-${{ needs.update-versions.outputs.version }}.msi
            - macOS (Intel): blinko-macos-x64-${{ needs.update-versions.outputs.version }}.dmg
            - macOS (Apple Silicon): blinko-macos-aarch64-${{ needs.update-versions.outputs.version }}.dmg
            
            ### 移动版本
            - Android: blinko-android-${{ needs.update-versions.outputs.version }}.apk
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 