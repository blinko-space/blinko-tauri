name: App Release

on:
  push:
    tags:
      - 'v*' # Match tags starting with v, e.g. v1.0.0, v1.2.3
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag Version (e.g. v1.0.0)'
        required: true
        type: string

jobs:
  # Generate changelog
  generate-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get Latest Tag
        id: get_previous_tag
        run: |
          # Get the second last tag (previous release version)
          PREVIOUS_TAG=$(git tag --sort=-creatordate | head -n 2 | tail -n 1)
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag found, use the first commit
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          
          # Set current tag based on trigger method
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "CURRENT_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "CURRENT_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
      
      - name: Set Version Variable
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.tag }}" != "" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          # Remove 'v' prefix from version
          VERSION="${TAG#v}"
          # Ensure VERSION is not empty, default to 1.0.0
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Set version: $VERSION"
      
      - name: Generate Changelog
        id: changelog
        run: |
          # Generate all commit logs since last release
          CHANGELOG=$(git log --pretty=format:"- %s (%h) by %an" ${{ env.PREVIOUS_TAG }}..${{ env.CURRENT_TAG }} | sort)
          
          # If no commit records, use default message
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- First release or no new commits"
          fi
          
          # Output log (multiline variable)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # Update Tauri Config Version
  update-version:
    runs-on: ubuntu-latest
    needs: generate-changelog
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Update Tauri Config Version
        run: |
          echo "Current version: ${{ needs.generate-changelog.outputs.version }}"
          # Update version using jq
          jq '.version = "${{ needs.generate-changelog.outputs.version }}"' app/src-tauri/tauri.conf.json > tmp.json && mv tmp.json app/src-tauri/tauri.conf.json
          echo "Updated tauri.conf.json:"
          cat app/src-tauri/tauri.conf.json
      
      - name: Upload tauri.conf.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-config
          path: app/src-tauri/tauri.conf.json

  # Desktop Platform Build Task
  publish-desktop:
    needs: [generate-changelog, update-version]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # Apple M-series chip (ARM)
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # Intel chip Mac
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # Linux Platform
            args: ''
          - platform: 'windows-latest' # Windows Platform
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download tauri.conf.json
        uses: actions/download-artifact@v4
        with:
          name: tauri-config
          path: app/src-tauri/

      - name: Install Ubuntu Dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Dependencies
        run: |
          bun install
          cd app && bun install

      # Using official Tauri Action to build and publish
      - name: Build and Publish Desktop App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: 'app'
          tauriScript: '../node_modules/.bin/tauri'
          args: ${{ matrix.args }}
          tagName: ${{ github.event.inputs.tag || github.ref_name }}
          releaseName: Blinko ${{ needs.generate-changelog.outputs.version }}
          releaseBody: ${{ needs.generate-changelog.outputs.changelog }}
          releaseDraft: false
          prerelease: false

  # Android Platform Build Task
  publish-android:
    needs: [generate-changelog, update-version]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download tauri.conf.json
        uses: actions/download-artifact@v4
        with:
          name: tauri-config
          path: app/src-tauri/

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: sdkmanager "ndk;27.0.11902837"

      - name: Setup Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Install bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        run: |
          bun install
          cd app && bun install

      - name: Run Prisma Generate
        run: bun run prisma:generate

      - name: Configure Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0-alpha"

      - name: Upload Keystore File
        run: |
          # Create keystore directory
          mkdir -p ~/.android
          # Create keystore file
          echo "${{ secrets.UPLOAD_KEYSTORE }}" | base64 --decode > ~/.android/upload-keystore.jks
          # Create keystore.properties
          mkdir -p app/src-tauri/gen/android
          cat > app/src-tauri/gen/android/keystore.properties << EOF
          password=106111
          keyAlias=upload
          storeFile=$HOME/.android/upload-keystore.jks
          EOF

      - name: Build Android App
        run: |
          cd app
          bun run tauri:android:build
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837

      - name: Rename Android App File
        run: |
          cd app/src-tauri/gen/android/app/build/outputs/apk/universal/release
          VERSION="${{ needs.generate-changelog.outputs.version }}"
          echo "Original APK file:"
          ls -la
          # Rename APK file
          mv app-universal-release.apk Blinko_${VERSION}_universal.apk
          echo "Renamed APK file:"
          ls -la

      - name: Publish Android App
        uses: softprops/action-gh-release@v1
        with:
          files: app/src-tauri/gen/android/app/build/outputs/apk/universal/release/Blinko_${{ needs.generate-changelog.outputs.version }}_universal.apk
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 