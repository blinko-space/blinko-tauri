name: 应用发布

on:
  push:
    tags:
      - 'v*' # 匹配以v开头的标签格式，例如 v1.0.0, v1.2.3
  workflow_dispatch:
    inputs:
      tag:
        description: '标签版本 (例如: v1.0.0)'
        required: true
        type: string

jobs:
  # 生成变更日志
  generate-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 获取最新标签
        id: get_previous_tag
        run: |
          # 获取倒数第二个标签（即上一个发布版本）
          PREVIOUS_TAG=$(git tag --sort=-creatordate | head -n 2 | tail -n 1)
          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果没有找到上一个标签，使用第一个提交
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          
          # 根据触发方式设置当前标签
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "CURRENT_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "CURRENT_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
      
      - name: 生成变更日志
        id: changelog
        run: |
          # 生成上次发布以来的所有提交日志
          CHANGELOG=$(git log --pretty=format:"- %s (%h) by %an" ${{ env.PREVIOUS_TAG }}..${{ env.CURRENT_TAG }} | sort)
          
          # 如果没有提交记录，使用默认消息
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- 首次发布或没有新提交"
          fi
          
          # 输出日志（多行变量）
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  # 更新Tauri配置版本号
  update-version:
    runs-on: ubuntu-latest
    needs: generate-changelog
    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置版本变量
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.tag }}" != "" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          # 移除版本号前的'v'
          VERSION="${TAG#v}"
          # 确保VERSION不为空，默认为1.0.0
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "设置的版本号: $VERSION"
      
      - name: 更新Tauri配置版本号
        run: |
          echo "当前版本号: ${{ env.VERSION }}"
          # 使用jq更新版本号
          jq '.version = "${{ env.VERSION }}"' app/src-tauri/tauri.conf.json > tmp.json && mv tmp.json app/src-tauri/tauri.conf.json
          echo "更新后的tauri.conf.json:"
          cat app/src-tauri/tauri.conf.json
      
      - name: 提交更改
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: 更新Tauri版本号至 ${{ env.VERSION }}"
          file_pattern: "app/src-tauri/tauri.conf.json"
          branch: ${{ github.event.repository.default_branch }}

  # 桌面平台构建任务
  publish-desktop:
    needs: [generate-changelog, update-version]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # 苹果M系列芯片(ARM)
            args: '--target aarch64-apple-darwin'
            bundle_path: 'app/src-tauri/target/aarch64-apple-darwin/release/bundle/**/*'
          - platform: 'macos-latest' # Intel芯片Mac
            args: '--target x86_64-apple-darwin'
            bundle_path: 'app/src-tauri/target/x86_64-apple-darwin/release/bundle/**/*'
          - platform: 'ubuntu-22.04' # Linux平台
            args: ''
            bundle_path: 'app/release_assets/*'
          - platform: 'windows-latest' # Windows平台
            args: ''
            bundle_path: 'app/src-tauri/target/release/bundle/**/*'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 安装Ubuntu依赖
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: 设置Node环境
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: 安装Rust稳定版
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust缓存
        uses: swatinem/rust-cache@v2
        with:
          workspaces: 'app/src-tauri -> target'

      - name: 安装bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 安装依赖
        run: |
          bun install
          cd app && bun install

      - name: 构建桌面应用
        run: |
          cd app
          bun run tauri:desktop:build ${{ matrix.args }}
          
          # 列出构建输出，帮助调试
          if [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            find src-tauri/target/release -type f -name "*.deb" -o -name "*.AppImage"
          fi

      - name: 准备发布文件 (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          cd app
          mkdir -p release_assets
          # 复制所有 .deb 和 .AppImage 文件到发布目录
          find src-tauri/target/release -name "*.deb" -o -name "*.AppImage" | xargs -I {} cp {} release_assets/
          ls -la release_assets

      - name: 列出构建文件
        run: |
          echo "查找构建文件..."
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            ls -R app/src-tauri/target/release/bundle/
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            ls -R app/src-tauri/target/${{ matrix.args == '--target aarch64-apple-darwin' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}/release/bundle/
          fi

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.bundle_path }}
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 安卓平台构建任务
  publish-android:
    needs: [generate-changelog, update-version]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 设置Android SDK
        uses: android-actions/setup-android@v3

      - name: 安装NDK
        run: sdkmanager "ndk;27.0.11902837"

      - name: 设置Node环境
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: 安装Rust稳定版
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: 安装bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 安装依赖
        run: |
          bun install
          cd app && bun install

      - name: 配置Gradle缓存
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 安装Tauri CLI
        run: cargo install tauri-cli --version "^2.0.0-alpha"

      - name: 上传Keystore文件
        run: |
          # 创建keystore目录
          mkdir -p ~/.android
          # 创建keystore文件
          echo "${{ secrets.UPLOAD_KEYSTORE }}" | base64 --decode > ~/.android/upload-keystore.jks
          # 创建keystore.properties
          mkdir -p app/src-tauri/gen/android
          cat > app/src-tauri/gen/android/keystore.properties << EOF
          password=106111
          keyAlias=upload
          storeFile=$HOME/.android/upload-keystore.jks
          EOF

      - name: 构建Android应用
        run: |
          cd app
          bun run tauri:android:build
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837

      - name: 发布Android应用
        uses: softprops/action-gh-release@v1
        with:
          files: app/src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 