name: Build and Push Release Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 1.0.0)'
        required: true
        default: ''
      trigger_app_release:
        description: 'Trigger app release simultaneously'
        type: boolean
        default: true
      set_latest:
        description: 'Set Docker image as latest tag'
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} Image
    permissions:
      contents: read
      packages: write
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          fi
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            dlhtx/blinko
            # ghcr.io/blinko-space/blinko
          tags: |
            type=raw,value=${{ env.VERSION }}
          flavor: |
            latest=${{ github.event_name != 'workflow_dispatch' || github.event.inputs.set_latest == 'true' }}
          labels: |
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}

      - name: Build and export
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          context: ./
          file: dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.workflow }}-${{ matrix.platform }}
          cache-to: type=gha,scope=${{ github.workflow }}-${{ matrix.platform }},mode=max
          outputs: type=image,name=dlhtx/blinko,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          rm -rf /tmp/digests
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge and Push Multi-Architecture Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digest-*
          merge-multiple: true

      - name: Extract version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            dlhtx/blinko
            # ghcr.io/blinko-space/blinko
          tags: |
            type=raw,value=${{ env.VERSION }}
          flavor: |
            latest=${{ github.event_name != 'workflow_dispatch' || github.event.inputs.set_latest == 'true' }}
          labels: |
            org.opencontainers.image.version=${{ env.VERSION }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'dlhtx/blinko@sha256:%s ' *)
          
          # docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON" | sed 's/blinkospace\/blinko/ghcr.io\/blinko-space\/blinko/g') \
          #   $(printf 'dlhtx/blinko@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect dlhtx/blinko:${{ env.VERSION }}
          # docker buildx imagetools inspect ghcr.io/blinko-space/blinko:${{ env.VERSION }}

  update-version:
    name: Update Project Version
    needs: merge
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git User
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get Version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          fi
          echo "Trigger app version release: ${{ env.VERSION }}"
          echo "Version value: ${{ env.VERSION }}"

      - name: Update package.json Version
        run: |
          # Update version using jq
          jq '.version = "${{ env.VERSION }}"' package.json > package.json.tmp
          mv package.json.tmp package.json
          
          # Commit changes
          git add package.json
          git commit -m "chore: Update version to ${{ env.VERSION }}"
          git push origin HEAD:${GITHUB_REF}

  trigger-app-release:
    name: Trigger App Build Release
    needs: update-version
    # Only run when manually triggered and app release trigger option selected
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.trigger_app_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get Version
        run: |
          if [[ "${{ github.event.inputs.version }}" != "" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          fi
          echo "Trigger app version release: ${{ env.VERSION }}"

      - name: Trigger App Release Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          event-type: trigger-app-release
          client-payload: |
            {
              "tag": "${{ env.VERSION }}",
              "version": "${{ env.VERSION }}",
              "sha": "${{ github.sha }}"
            }
