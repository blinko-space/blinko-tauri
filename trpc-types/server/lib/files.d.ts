import { S3Client } from "@aws-sdk/client-s3";
export declare class FileService {
    static getS3Client(): Promise<{
        s3ClientInstance: S3Client;
        config: {
            isAutoArchived?: boolean | undefined;
            autoArchivedDays?: number | undefined;
            isUseAI?: boolean | undefined;
            aiModelProvider?: any;
            aiApiKey?: any;
            aiApiEndpoint?: any;
            aiApiVersion?: any;
            aiModel?: any;
            isHiddenMobileBar?: boolean | undefined;
            toolbarVisibility?: any;
            isAllowRegister?: any;
            isCloseBackgroundAnimation?: boolean | undefined;
            customBackgroundUrl?: any;
            isOrderByCreateTime?: any;
            timeFormat?: any;
            smallDeviceCardColumns?: any;
            mediumDeviceCardColumns?: any;
            largeDeviceCardColumns?: any;
            textFoldLength?: number | undefined;
            objectStorage?: any;
            s3AccessKeyId?: any;
            s3AccessKeySecret?: any;
            s3Endpoint?: any;
            s3Bucket?: any;
            s3CustomPath?: any;
            s3Region?: any;
            localCustomPath?: any;
            embeddingModel?: any;
            embeddingDimensions?: number | undefined;
            embeddingTopK?: number | undefined;
            embeddingLambda?: number | undefined;
            embeddingScore?: number | undefined;
            excludeEmbeddingTagId?: number | undefined;
            language?: any;
            theme?: any;
            themeColor?: any;
            themeForegroundColor?: any;
            webhookEndpoint?: any;
            twoFactorEnabled?: boolean | undefined;
            twoFactorSecret?: string | undefined;
            spotifyConsumerKey?: string | undefined;
            spotifyConsumerSecret?: string | undefined;
            isCloseDailyReview?: boolean | undefined;
            maxHomePageWidth?: number | undefined;
            oauth2Providers?: {
                name: string;
                id: string;
                tokenUrl: string;
                userinfoUrl: string;
                clientId: string;
                clientSecret: string;
                icon?: string | undefined;
                wellKnown?: string | undefined;
                scope?: string | undefined;
                authorizationUrl?: string | undefined;
            }[] | undefined;
            isUseBlinkoHub?: boolean | undefined;
            embeddingApiEndpoint?: string | undefined;
            embeddingApiKey?: string | undefined;
            isHiddenNotification?: boolean | undefined;
            tavilyApiKey?: any;
            tavilyMaxResult?: any;
            isHideBlogImages?: boolean | undefined;
            isUseAiPostProcessing?: boolean | undefined;
            aiCommentPrompt?: string | undefined;
            aiTagsPrompt?: string | undefined;
            aiPostProcessingMode?: string | undefined;
            isUseHttpProxy?: boolean | undefined;
            httpProxyHost?: string | undefined;
            httpProxyPort?: number | undefined;
            httpProxyUsername?: string | undefined;
            httpProxyPassword?: string | undefined;
            aiSmartEditPrompt?: string | undefined;
            rerankModel?: string | undefined;
            rerankTopK?: number | undefined;
            rerankScore?: number | undefined;
            rerankUseEembbingEndpoint?: boolean | undefined;
        };
    }>;
    private static writeFileSafe;
    static uploadFile({ buffer, originalName, type, withOutAttachment, accountId }: {
        buffer: Buffer;
        originalName: string;
        type: string;
        withOutAttachment?: boolean;
        accountId: number;
    }): Promise<{
        filePath: string;
        fileName: string;
    }>;
    static getOriginFilename(name: string): string;
    static deleteFile(api_attachment_path: string): Promise<void>;
    static getFile(filePath: string): Promise<string>;
    static uploadFileStream({ stream, originalName, fileSize, type, accountId }: {
        stream: ReadableStream;
        originalName: string;
        fileSize: number;
        type: string;
        accountId: any;
    }): Promise<{
        filePath: string;
        fileName: string;
    }>;
    static createAttachment({ path, name, size, type, noteId, accountId }: {
        path: string;
        name: string;
        size: number;
        type: string;
        noteId?: number | null;
        accountId: number;
    }): Promise<void>;
    static renameFile(oldPath: string, newName: string): Promise<void>;
    static moveFile(oldPath: string, newPath: string): Promise<void>;
}
